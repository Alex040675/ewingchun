<?php

/**
 * Implements hook_menu.
 */
function fields_update_menu() {
  $items = array();
  $items['admin/fix-variants'] = array(
    'title' => 'Order Report',
    'page callback' => 'fields_update_fix_prods',
    'access arguments' => array('administer nodes'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Set up batch to process to process nodes all nodes
 * @param null $date
 */
function fields_update_fix_prods() {
  $sql = db_select('node', 'n');
  $sql->addField('n', 'nid');
  $sql->condition('n.type', 'sifu');
  $res = $sql->execute()->fetchAllAssoc('nid', PDO::FETCH_ASSOC);
  $data = array_keys($res);

  $batch = array(
    'operations' => array(
      array('fields_update_process_prods', array($data)),
    ),
    'finished' => 'fields_update_batch_finished',
    'title' => t('updating nodes'),
    'init_message' => t('nodes process ') ,
    'progress_message' => t('Processed @current out of @total. ') .l("Back to admins", 'admin') ,
    'error_message' => t('Report has encountered an error.'),
  );
  batch_set($batch);
  batch_process('admin/commerce/orders');
}
function fields_update_process_prods($data, &$context) {
  $data = array(67);
  if (!isset($context['sandbox']['progress'])) {
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['current_node'] = 0;
    $context['sandbox']['max'] = count($data);

  }

  $limit = 5;
  $output = $context['results'];
  $current_itr = $context['sandbox']['progress'] + $limit;
  for($k = $context['sandbox']['progress']; $k < $current_itr; $k++) {
    $node = node_load($data[$k]);

    if (count($node->field_noderef_instructor['und']) > 1 ) {
      foreach ($node->field_noderef_instructor['und'] as $key => $val) {

        if ($key == 0) {
          $fc_item = entity_create('field_collection_item', array('field_name' => 'field_lineage_information'));
          $fc_item->setHostEntity('node', $node);
          $fc_wrapper = entity_metadata_wrapper('field_collection_item', $fc_item);
          $fc_wrapper->field_noderef_instructor->set($node->field_noderef_instructor['und'][0]['nid']);
          $fc_wrapper->field_primary_lineage->set($node->field_primary_lineage['und'][0]['value']);
          $fc_wrapper->field_taxo_rank->set($node->field_taxo_rank['und'][0]['value']);
          $fc_wrapper->field_taxo_rank->set($node->$node->field_taxo_rank['und'][0]['tid']);
          $fc_wrapper->save(TRUE);
          node_save($node);
        }
        else {
          $fc_item = entity_create('field_collection_item', array('field_name' => 'field_lineage_information'));

          $fc_item->setHostEntity('node', $node);

          $fc_wrapper = entity_metadata_wrapper('field_collection_item', $fc_item);
          $fc_wrapper->field_noderef_instructor->set($node->field_noderef_instructor['und'][$key]['nid']);

          $fc_wrapper->save(TRUE);
          node_save($node);
        }
      }

    }
    else {
      $fc_item = entity_create('field_collection_item', array('field_name' => 'field_lineage_information'));

      $fc_item->setHostEntity('node', $node);

      $fc_wrapper = entity_metadata_wrapper('field_collection_item', $fc_item);
      $fc_wrapper->field_noderef_instructor->set($node->field_noderef_instructor['und'][0]['nid']);
      $fc_wrapper->field_primary_lineage->set($node->field_primary_lineage['und'][0]['value']);
      $fc_wrapper->field_taxo_rank->set($node->field_taxo_rank['und'][0]['value']);
      $fc_wrapper->field_taxo_rank->set($node->$node->field_taxo_rank['und'][0]['tid']);

      $fc_wrapper->save(TRUE);
      node_save($node);

    }

    $context['sandbox']['progress']++;
    $context['message'] = t('Now processing %oid', array('%oid' => $node->nid));
  }

  // Inform the batch engine that we are not finished,
  // and provide an estimation of the completion level we reached.
  if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }
}
function fields_update_batch_finished($success, $operations) {
  if ($success) {
    $message = t('Updates were successfully finished');
    drupal_set_message($message, 'status');
  }
  else {
    // An error occurred.
    // $operations contains the operations that remained unprocessed.
    $error_operation = reset($operations);
    $message = t('An error occurred while processing %error_operation with arguments: @arguments', array('%error_operation' => $error_operation[0], '@arguments' => print_r($error_operation[1], TRUE)));
    drupal_set_message($message, 'error');
  }

}

function fields_update_product_load_by_title($title) {
  $query = db_select('commerce_product', 'cp');
  $query->addField('cp', 'product_id');
  $query->condition('title', $title);
  $result = $query->execute()->fetchField();
  return $result;
}